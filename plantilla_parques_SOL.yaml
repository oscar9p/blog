apiVersion: template.openshift.io/v1
kind: Template
labels:
  application: nationalparks-py
metadata:
  annotations:
    description: Application template National Parks backend running on Python/Flask
      and using mongodb
    iconClass: icon-java
  name: nationalparks-py
objects:
- apiVersion: v1
  data:
    application.properties: spring.data.mongodb.uri=mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@${MONGODB_APPLICATION_NAME}:27017/${MONGODB_DATABASE}
    db.name: ${MONGODB_DATABASE}
    db.password: ${MONGODB_PASSWORD}
    db.properties: |-
      db.user=${MONGODB_USER}
      db.password=${MONGODB_PASSWORD}
      db.name=${MONGODB_DATABASE}
    db.user: ${MONGODB_USER}
  kind: ConfigMap
  metadata:
    labels:
      component: config
    name: ${APPLICATION_NAME}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      component: ${MONGODB_APPLICATION_NAME}
    name: ${MONGODB_APPLICATION_NAME}
  spec:
    ports:
    - name: mongo
      port: 27017
      protocol: TCP
      targetPort: 27017
    selector:
      name: ${MONGODB_APPLICATION_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      component: ${MONGODB_APPLICATION_NAME}
    name: ${MONGODB_APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      name: ${MONGODB_APPLICATION_NAME}
    strategy:
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          name: ${MONGODB_APPLICATION_NAME}
      spec:
        containers:
        - env:
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: MONGODB_USER
            valueFrom:
              configMapKeyRef:
                key: db.user
                name: ${APPLICATION_NAME}
          - name: MONGODB_PASSWORD
            valueFrom:
              configMapKeyRef:
                key: db.password
                name: ${APPLICATION_NAME}
          - name: MONGODB_DATABASE
            valueFrom:
              configMapKeyRef:
                key: db.name
                name: ${APPLICATION_NAME}
          - name: MONGODB_ADMIN_PASSWORD
            value: ${MONGODB_ADMIN_PASSWORD}
          image: ${MONGODB_APPLICATION_NAME}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 27017
            timeoutSeconds: 1
          name: ${MONGODB_APPLICATION_NAME}
          ports:
          - containerPort: 27017
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER -p $MONGODB_PASSWORD
                --eval="quit()"
            failureThreshold: 3
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/mongodb/data
            name: mongodb-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: mongodb-data
    test: false
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${MONGODB_APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: mongodb:3.2
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: mongodb
  spec:
    lookupPolicy:
      local: false
    tags:
    - from:
        kind: DockerImage
        name: registry.redhat.io/rhscl/mongodb-32-rhel7
      importPolicy: {}
      name: "3.2"
      referencePolicy:
        type: Source
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: ${APPLICATION_NAME}
  spec:
    tags:
    - name: latest
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      build: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      git:
        ref: ${GIT_REF}
        uri: ${GIT_URI}
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: python:2.7
          namespace: openshift
        incremental: false
      type: Source
    triggers:
    - github:
        secret: ${GITHUB_TRIGGER_SECRET}
      type: GitHub
    - generic:
        secret: ${GENERIC_TRIGGER_SECRET}
      type: Generic
    - type: ConfigChange
    - type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      component: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      component: ${APPLICATION_NAME}
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        post:
          execNewPod:
            command:
            - curl
            - -s
            - http://${APPLICATION_NAME}:8080/ws/data/load
            containerName: ${APPLICATION_NAME}
          failurePolicy: Ignore
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          component: ${APPLICATION_NAME}
      spec:
        containers:
        - env:
          - name: KUBERNETES_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: DB_HOST
            value: ${MONGODB_APPLICATION_NAME}
          - name: DB_USERNAME
            valueFrom:
              configMapKeyRef:
                key: db.user
                name: ${APPLICATION_NAME}
          - name: DB_PASSWORD
            valueFrom:
              configMapKeyRef:
                key: db.password
                name: ${APPLICATION_NAME}
          - name: DB_NAME
            valueFrom:
              configMapKeyRef:
                key: db.name
                name: ${APPLICATION_NAME}
          image: ${APPLICATION_NAME}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /ws/healthz/
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: ${APPLICATION_NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ws/healthz/
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name":"${MONGODB_APPLICATION_NAME}","namespace":"","kind":"Service"}]'
    labels:
      component: ${APPLICATION_NAME}
      type: parksmap-backend
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      component: ${APPLICATION_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      component: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    host: ${APPLICATION_HOSTNAME}
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: ${APPLICATION_NAME}
      weight: 100
parameters:
- description: The name for the nationalparks-py application.
  displayName: Application Name
  name: APPLICATION_NAME
  required: true
- description: 'Custom hostname for nationalparks-py application.  Leave blank for
    default hostname, e.g.: <application-name>.<project>.<default-domain-suffix>'
  displayName: Application route
  name: APPLICATION_HOSTNAME
  required: true
- description: The name for the mongodb application.
  displayName: Mongodb App
  name: MONGODB_APPLICATION_NAME
  value: mongodb
- description: Git source URI for application
  displayName: Git source repository
  name: GIT_URI
  value: https://github.com/openshift-roadshow/nationalparks-py.git
- description: Git branch/tag reference
  displayName: Git branch/tag reference
  name: GIT_REF
  value: master
- description: Database name
  displayName: Database name
  name: MONGODB_DATABASE
  value: mongodb
- description: Disable data file preallocation.
  name: MONGODB_NOPREALLOC
- description: Set MongoDB to use a smaller default data file size.
  name: MONGODB_SMALLFILES
- description: Runs MongoDB in a quiet mode that attempts to limit the amount of output.
  name: MONGODB_QUIET
- description: Database user name
  displayName: Database user name
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: MONGODB_USER
- description: Database user password
  displayName: Database user password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: MONGODB_PASSWORD
- description: Database admin password
  displayName: Database admin password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: MONGODB_ADMIN_PASSWORD
- description: Github trigger secret
  displayName: GitHub Trigger
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: GITHUB_TRIGGER_SECRET
- description: Generic build trigger secret
  displayName: Generic Trigger
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: GENERIC_TRIGGER_SECRET
